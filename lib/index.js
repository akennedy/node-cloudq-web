// Generated by CoffeeScript 1.3.3
var db, filed, http, queueTemplate, request, url, zeke;

http = require('http');

request = require('request');

zeke = require('zeke');

url = require('url');

filed = require('filed');

db = 'http://localhost:5984/cloudq';

queueTemplate = function() {
  return html(function() {
    head(function() {
      title('Cloud Queue Status');
      link({
        rel: 'stylesheet',
        href: '/css/bootstrap.min.css'
      });
      return link({
        rel: 'stylesheet',
        href: '/css/bootstrap-responsive.min.css'
      });
    });
    return body(function() {
      div('.container', function() {
        h1('GMMS Queue Status');
        return table('.table', function() {
          var k, v, _ref, _results;
          tr(function() {
            th('Name');
            th('Queued');
            th('Reserved');
            return th('Completed');
          });
          _ref = this.qResults;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push(tr(function() {
              td(k);
              td(v.queued || '0');
              td(v.reserved || '0');
              return td(v.completed || '0');
            }));
          }
          return _results;
        });
      });
      script({
        src: 'http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js'
      });
      return script({
        src: '/js/bootstrap.min.js'
      });
    });
  });
};

module.exports = function() {
  var server;
  server = http.createServer(function(req, res) {
    var pathname;
    pathname = url.parse(req.url).pathname;
    if (pathname.match(/^\/(css|img|js)/)) {
      return filed("./public" + pathname).pipe(res);
    } else if (req.method === 'GET') {
      return request(db + '/_design/queues/_view/all?group=true', {
        json: true
      }, function(e, r, b) {
        var item, queue, results, state, _i, _len, _ref, _ref1, _ref2;
        res.writeHead(404, {
          'content-type': 'text/html'
        });
        results = {};
        _ref = b.rows;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _ref1 = item.key.split('-'), queue = _ref1[0], state = _ref1[1];
          if ((_ref2 = results[queue]) == null) {
            results[queue] = {};
          }
          results[queue][state] = item.value;
        }
        return res.end(zeke.render(queueTemplate, {
          qResults: results
        }));
      });
    } else {
      res.writeHead(404, {
        'content-type': 'text/plain'
      });
      return res.end('Request Not Found');
    }
  });
  return server.listen(process.env.PORT || 3000);
};
